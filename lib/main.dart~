import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_gemini/flutter_gemini.dart'; // Import the package
import 'package:connectivity_plus/connectivity_plus.dart'; // For checking network connectivity

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    String? apiKey = "AIzaSyDueBLKTxP68nOom8LgytxpQAS6GbzC9BI"; // Replace with actual API key
    if (apiKey.isEmpty) {
      throw Exception('API key is missing');
    }
    await Gemini.init(apiKey: apiKey); // Await initialization
  } catch (e) {
    debugPrint('Failed to initialize Gemini API: $e');
  }

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Gemini Demo',
      theme: ThemeData(
        colorScheme: const ColorScheme(
          primary: Colors.green,
          primaryContainer: Colors.black,
          secondary: Colors.greenAccent,
          secondaryContainer: Colors.black,
          surface: Colors.black,
          error: Colors.red,
          onPrimary: Colors.black,
          onSecondary: Colors.black,
          onSurface: Colors.white,
          onError: Colors.white,
          brightness: Brightness.dark,
        ),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Road Map AI'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _gemini = Gemini.instance; // Instance for interacting with Gemini API
  String _response = ""; // Variable to display API response
  bool _isLoading = false; // Flag for showing loading indicator
  final _textFieldController = TextEditingController(); // Controller for the TextField

  @override
  void initState() {
    super.initState();
    _listenForConnectivityChanges();
  }

  // Method to listen for connectivity changes
  void _listenForConnectivityChanges() {
    Connectivity().onConnectivityChanged.listen((ConnectivityResult result) {
      if (result == ConnectivityResult.none) {
        _showNoInternetSnackBar();
      }
    });
  }

  // Method to check for network connection
  Future<bool> _isConnected() async {
    var connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  // Method to show a snackbar when there's no internet
  void _showNoInternetSnackBar() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('No Internet Connection'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  // Method to show an alert dialog
  void _showAlert(String title, String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Text(message),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  // Method to call Gemini API and get the roadmap
  void _getRoadMap(String prompt) async {
    if (!await _isConnected()) {
      _showNoInternetSnackBar();
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      var text = "give me a road map for: $prompt with sources to learn each step";
      var value = await _gemini.text(text); // Await the response from the API

      if (value != null && value.output != null) {
        setState(() {
          _response = value.output!;
        });
      } else {
        _showAlert('Error', 'Could not fetch the roadmap. Please try again later.');
      }
    } catch (e) {
      _showAlert('Error', 'An error occurred: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _clearResponse() {
    setState(() {
      _response = ""; // Clear the API response
      _textFieldController.clear(); // Clear the TextField input
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.primaryContainer.withOpacity(0.8),
        title: Text(widget.title),
      ),
      body: Stack(
        children: [
          // Background image
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: const AssetImage('assets/images/70d1c82d5b7fe75cb61f7866311eafd4.jpg'),
                fit: BoxFit.cover,
                onError: (exception, stackTrace) {
                  _showAlert('Error', 'Failed to load image: $exception');
                },
              ),
            ),
            child: Container(color: Colors.black.withOpacity(0.3)), // Fallback if image fails
          ),
          // Apply blur effect on top of the image
          Positioned.fill(
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0),
              child: Container(
                color: Colors.black.withOpacity(0.3),
              ),
            ),
          ),
          // Main content with ListView
          ListView(
            padding: const EdgeInsets.all(20.0),
            children: <Widget>[
              const Center(
                child: Text(
                  'WELCOME',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 24,
                  ),
                ),
              ),
              const SizedBox(height: 20),
              // Input field
              TextField(
                controller: _textFieldController,
                decoration: InputDecoration(
                  filled: true,
                  fillColor: Colors.black.withOpacity(0.7),
                  border: const OutlineInputBorder(),
                  hintText: 'Road Map For',
                  hintStyle: TextStyle(color: Colors.white.withOpacity(0.7)),
                ),
                style: TextStyle(color: Colors.white.withOpacity(0.7)),
              ),
              const SizedBox(height: 20),
              // Button to fetch roadmap
              TextButton(
                onPressed: () {
                  final prompt = _textFieldController.text;
                  if (prompt.isNotEmpty) {
                    _getRoadMap(prompt);
                  } else {
                    _showAlert('Input Error', 'Please provide a valid input.');
                  }
                },
                style: TextButton.styleFrom(
                  backgroundColor: Colors.black.withOpacity(0.8),
                  padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  foregroundColor: Colors.white,
                ),
                child: const Text('Get it !!!'),
              ),
              const SizedBox(height: 20),
              // Response field or loading indicator
              if (_isLoading)
                const Center(child: CircularProgressIndicator())
              else if (_response.isNotEmpty)
                SelectableText(
                  _response,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                  ),
                ),
              const SizedBox(height: 20),
              // Clear button if there's a response
              if (_response.isNotEmpty)
                TextButton(
                  onPressed: _clearResponse,
                  style: TextButton.styleFrom(
                    backgroundColor: Colors.black.withOpacity(0.8),
                    padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                    foregroundColor: Colors.white,
                  ),
                  child: const Text('Clear'),
                ),
            ],
          ),
        ],
      ),
    );
  }
}
